# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import ocr_pb2 as ocr__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in ocr_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class OCRServiceStub(object):
    """OCR Service Definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessFullImage = channel.unary_unary(
                '/ocr.OCRService/ProcessFullImage',
                request_serializer=ocr__pb2.ProcessFullImageRequest.SerializeToString,
                response_deserializer=ocr__pb2.ProcessFullImageResponse.FromString,
                _registered_method=True)
        self.ProcessBboxes = channel.unary_unary(
                '/ocr.OCRService/ProcessBboxes',
                request_serializer=ocr__pb2.ProcessBboxesRequest.SerializeToString,
                response_deserializer=ocr__pb2.ProcessBboxesResponse.FromString,
                _registered_method=True)
        self.ProcessSingleBbox = channel.unary_unary(
                '/ocr.OCRService/ProcessSingleBbox',
                request_serializer=ocr__pb2.ProcessSingleBboxRequest.SerializeToString,
                response_deserializer=ocr__pb2.ProcessSingleBboxResponse.FromString,
                _registered_method=True)
        self.GetEngineStatus = channel.unary_unary(
                '/ocr.OCRService/GetEngineStatus',
                request_serializer=ocr__pb2.EngineStatusRequest.SerializeToString,
                response_deserializer=ocr__pb2.EngineStatusResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/ocr.OCRService/HealthCheck',
                request_serializer=ocr__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=ocr__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class OCRServiceServicer(object):
    """OCR Service Definition
    """

    def ProcessFullImage(self, request, context):
        """Process full image with specified engine
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessBboxes(self, request, context):
        """Process specific bounding boxes
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessSingleBbox(self, request, context):
        """Process single bounding box
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEngineStatus(self, request, context):
        """Get engine status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OCRServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessFullImage': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessFullImage,
                    request_deserializer=ocr__pb2.ProcessFullImageRequest.FromString,
                    response_serializer=ocr__pb2.ProcessFullImageResponse.SerializeToString,
            ),
            'ProcessBboxes': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessBboxes,
                    request_deserializer=ocr__pb2.ProcessBboxesRequest.FromString,
                    response_serializer=ocr__pb2.ProcessBboxesResponse.SerializeToString,
            ),
            'ProcessSingleBbox': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessSingleBbox,
                    request_deserializer=ocr__pb2.ProcessSingleBboxRequest.FromString,
                    response_serializer=ocr__pb2.ProcessSingleBboxResponse.SerializeToString,
            ),
            'GetEngineStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEngineStatus,
                    request_deserializer=ocr__pb2.EngineStatusRequest.FromString,
                    response_serializer=ocr__pb2.EngineStatusResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=ocr__pb2.HealthCheckRequest.FromString,
                    response_serializer=ocr__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ocr.OCRService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ocr.OCRService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class OCRService(object):
    """OCR Service Definition
    """

    @staticmethod
    def ProcessFullImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ocr.OCRService/ProcessFullImage',
            ocr__pb2.ProcessFullImageRequest.SerializeToString,
            ocr__pb2.ProcessFullImageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessBboxes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ocr.OCRService/ProcessBboxes',
            ocr__pb2.ProcessBboxesRequest.SerializeToString,
            ocr__pb2.ProcessBboxesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessSingleBbox(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ocr.OCRService/ProcessSingleBbox',
            ocr__pb2.ProcessSingleBboxRequest.SerializeToString,
            ocr__pb2.ProcessSingleBboxResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEngineStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ocr.OCRService/GetEngineStatus',
            ocr__pb2.EngineStatusRequest.SerializeToString,
            ocr__pb2.EngineStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ocr.OCRService/HealthCheck',
            ocr__pb2.HealthCheckRequest.SerializeToString,
            ocr__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
